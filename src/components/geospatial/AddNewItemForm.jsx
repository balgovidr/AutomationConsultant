'use client'

import { useState } from 'react';
import CloseIcon from '@mui/icons-material/Close';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';

export default function AddNewItemForm({layerDefinitions, setShowItemForm}) {
	const [selectedLayer, setSelectedLayer] = useState('');
	const [formData, setFormData] = useState({});
	const [errors, setErrors] = useState({});

	const currentLayer = layerDefinitions.find(layer => layer.id === selectedLayer);

	const handleLayerChange = (layerId) => {
		setSelectedLayer(layerId);
		setFormData({});
		setErrors({});
	};

	const handleInputChange = (attributeId, value) => {
		setFormData(prev => ({
			...prev,
			[attributeId]: value
		}));
		
		// Clear error when user starts typing
		if (errors[attributeId]) {
			setErrors(prev => ({
				...prev,
				[attributeId]: null
			}));
		}
	};

	const validateForm = () => {
		const newErrors = {};
		
		if (!currentLayer) return newErrors;

		currentLayer.attributes.forEach(attr => {
			if (attr.required && !attr.autoGenerated) {
				const value = formData[attr.id];
				if (!value || (typeof value === 'string' && value.trim() === '')) {
					newErrors[attr.id] = `${attr.name} is required`;
				}
			}

			if (attr.type === 'number' && formData[attr.id]) {
				const numValue = Number(formData[attr.id]);
				if (isNaN(numValue)) {
					newErrors[attr.id] = `${attr.name} must be a valid number`;
				} else if (attr.min !== undefined && numValue < attr.min) {
					newErrors[attr.id] = `${attr.name} must be at least ${attr.min}`;
				}
			}
		});

		return newErrors;
	};

	const handleSubmit = (e) => {
		e.preventDefault();
		
		const validationErrors = validateForm();
		if (Object.keys(validationErrors).length > 0) {
			setErrors(validationErrors);
			return;
		}

		// Here you would submit the form data to your backend
		console.log('Submitting form data:', {
			layerId: selectedLayer,
			data: formData
		});
		
		// Reset form and close
		setFormData({});
		setSelectedLayer('');
		setShowItemForm(false);
	};

	const renderFormField = (attribute) => {
		if (attribute.autoGenerated) {
			return (
				<div key={attribute.id} className="mb-4">
					<label className="block text-sm font-medium text-gray-700 mb-1">
						{attribute.name}
					</label>
					<div className="px-3 py-2 bg-gray-100 border border-gray-300 rounded-md text-gray-500 text-sm">
						Auto-generated on save
					</div>
				</div>
			);
		}

		const hasError = errors[attribute.id];
		const baseClasses = `w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
		hasError ? 'border-red-500' : 'border-gray-300'
		}`;

		switch (attribute.type) {
		case 'string':
			return (
			<div key={attribute.id} className="mb-4">
				<label className="block text-sm font-medium text-gray-700 mb-1">
				{attribute.name}
				{attribute.required && <span className="text-red-500 ml-1">*</span>}
				</label>
				<input
				type="text"
				value={formData[attribute.id] || ''}
				onChange={(e) => handleInputChange(attribute.id, e.target.value)}
				className={baseClasses}
				placeholder={`Enter ${attribute.name.toLowerCase()}`}
				/>
				{hasError && <p className="text-red-500 text-xs mt-1">{hasError}</p>}
			</div>
			);

		case 'number':
			return (
			<div key={attribute.id} className="mb-4">
				<label className="block text-sm font-medium text-gray-700 mb-1">
				{attribute.name}
				{attribute.required && <span className="text-red-500 ml-1">*</span>}
				</label>
				<input
				type="number"
				value={formData[attribute.id] || ''}
				onChange={(e) => handleInputChange(attribute.id, e.target.value)}
				className={baseClasses}
				placeholder={`Enter ${attribute.name.toLowerCase()}`}
				min={attribute.min}
				/>
				{hasError && <p className="text-red-500 text-xs mt-1">{hasError}</p>}
			</div>
			);

		case 'date':
			return (
			<div key={attribute.id} className="mb-4">
				<label className="block text-sm font-medium text-gray-700 mb-1">
				{attribute.name}
				{attribute.required && <span className="text-red-500 ml-1">*</span>}
				</label>
				<div className="relative">
				<input
					type="date"
					value={formData[attribute.id] || ''}
					onChange={(e) => handleInputChange(attribute.id, e.target.value)}
					className={`${baseClasses} pr-10`}
				/>
				<CalendarTodayIcon sx={{ fontSize: 16 }} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
				</div>
				{hasError && <p className="text-red-500 text-xs mt-1">{hasError}</p>}
			</div>
			);

		case 'enum':
			return (
			<div key={attribute.id} className="mb-4">
				<label className="block text-sm font-medium text-gray-700 mb-1">
				{attribute.name}
				{attribute.required && <span className="text-red-500 ml-1">*</span>}
				</label>
				<select
				value={formData[attribute.id] || ''}
				onChange={(e) => handleInputChange(attribute.id, e.target.value)}
				className={baseClasses}
				>
				<option value="">Select {attribute.name.toLowerCase()}</option>
				{attribute.options.map(option => (
					<option key={option} value={option}>{option}</option>
				))}
				</select>
				{hasError && <p className="text-red-500 text-xs mt-1">{hasError}</p>}
			</div>
			);

		case 'file':
			return (
			<div key={attribute.id} className="mb-4">
				<label className="block text-sm font-medium text-gray-700 mb-1">
				{attribute.name}
				{attribute.required && <span className="text-red-500 ml-1">*</span>}
				</label>
				<div className={`border-2 border-dashed rounded-md p-4 text-center ${hasError ? 'border-red-500' : 'border-gray-300'}`}>
				<input
					type="file"
					onChange={(e) => handleInputChange(attribute.id, e.target.files[0])}
					className="hidden"
					id={`file-${attribute.id}`}
					accept=".pdf"
				/>
				<label 
					htmlFor={`file-${attribute.id}`}
					className="cursor-pointer flex flex-col items-center justify-center"
				>
					<UploadFileIcon sx={{ fontSize: 32 }} className="text-gray-400 mb-2" />
					<span className="text-sm text-gray-600">
					{formData[attribute.id] ? formData[attribute.id].name : 'Click to upload file'}
					</span>
					<span className="text-xs text-gray-400 mt-1">PDF files only</span>
				</label>
				</div>
				{hasError && <p className="text-red-500 text-xs mt-1">{hasError}</p>}
			</div>
			);

		default:
			return null;
		}
	};

	return (
		<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
			<div className="bg-white rounded-lg shadow-xl w-full max-w-md h-[600px] flex flex-col">
				{/* Header */}
				<div className="flex items-center justify-between p-6 border-b">
					<h2 className="text-xl font-semibold text-gray-900">Add Location Data</h2>
					<button onClick={() => setShowItemForm(false)} className="text-gray-400 hover:text-gray-600">
						<CloseIcon sx={{ fontSize: 24 }} />
					</button>
				</div>

				{/* Form */}
				{/* Form Content */}
				<div className="flex-1 overflow-y-auto p-6 min-h-0">
				{/* Layer Selection */}
					<div className="mb-6">
						<label className="block text-sm font-medium text-gray-700 mb-1">
							Select Layer <span className="text-red-500">*</span>
						</label>
						<select
							value={selectedLayer}
							onChange={(e) => handleLayerChange(e.target.value)}
							className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
							required
						>
						<option value="">Choose a layer...</option>
							{layerDefinitions.map(layer => (
								<option key={layer.id} value={layer.id}>
									{layer.name}
								</option>
							))}
						</select>
					</div>

				{/* Dynamic Form Fields */}
				{currentLayer && (
					<div className="space-y-4">
						<div className="border-t pt-4">
							<h3 className="text-lg font-medium text-gray-900 mb-4">
								{currentLayer.name} Details
							</h3>
							{currentLayer.attributes.map(renderFormField)}
						</div>
					</div>
				)}
				</div>

				{/* Form Actions */}
				<div className="p-6 border-t bg-gray-50">
					{currentLayer ? (
						<div className="flex gap-3">
							<button
								type="button"
								onClick={() => setShowItemForm(false)}
								className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
							>
								Cancel
							</button>
							<button
								type="button"
								onClick={handleSubmit}
								className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
							>
								Save Data
							</button>
						</div>
					) : (
						<button
							type="button"
							onClick={() => setShowItemForm(false)}
							className="w-full px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
						>
							Close
						</button>
					)}
				</div>
			</div>
		</div>
	);
}